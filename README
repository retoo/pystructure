The PyStructure Project
=======================

This project's goal is to develop a structural analyser for programs written in
the Python programming language. The analyser should be able to parse an
application's source code, analyse it and then generate a graph representing
the internal structure of the project.

As Python is a dynamic language most of the interesting details (i.e. type) are
not known before the application is running. The analyser has to 'guess' the
correct type by analysing the code base.

The project is licensed under the LGPL (v2 or later), see the COPYING file.

For more information, visit our project page at:

  http://pystructure.ifs.hsr.ch/

Current Limitations
-------------------

Although the engine already supports a wide variety of cases it still lacks
some very important features:

 * No support for inheritance

   Currently the engine ignores everything that involves inheritance.
   For example if a method is implemented in a base class it won't be found
   if it was called on an instance of a sub class.

 * Type of list/dict elements is not known

   The type of container elements cannot be determined yet. For projects which
   heavily rely on lists this means that a lot of types can't be determined-

 * Only little support for built-ins 

   Only a few built-in operations are recognised. For example the type
   inference engine doesn't yet know that len("str") returns an integer.

We are working on tackling these issues in the next two milestones and we hope
to improve the accuracy of the engine significantly.

Using PyStructure
-----------------

At the moment, there's a simple command line interface. It expects Python
source directories as arguments and writes the Structure101 XML file for the
code to standard output. It will print some statistics to standard error.

First, extract the files from the pystructure archive. There should be a
pystructure.jar archive in the root of the directory. We're using this to
execute the CLI:

  java -cp pystructure.jar:lib/jdom/jdom.jar ch.hsr.ifs.pystructure.CLI \
    /path/to/source/directory > myproject.xml

The source directory is where your Python modules and packages reside in.

The generated XML file can then be viewed in Structure101g, by choosing File ->
New and then specifying the XML file. But before this works, Structure101g has
to be set up as explained in the next section.

Of course, the project can also be used as a library to get more information
than is exported in the XML. A simple example for querying the type of an
expression at a specified line is provided in the file SimpleExample.java in
the package ch.hsr.ifs.pystructure.playground.


Setting up Structure101g
------------------------

Download Structure101g here: 

  http://www.headwaysoftware.com/products/structure101/g/

Extract the files from the archive and go to the directory where the main
executable is. Create a directory called "flavors" there and copy the directory
"s101g/ch.hsr.ifs.pystructure" from the pystructure archive into it.

