<?xml version="1.0"?>

<!--	I'm a useless comment, please give me some purpose! 
			For example use me to force cc builds!-->

<project name="PyStructure" default="all">
	<property file="build.properties"/>
	<property file="build.properties.local"/>
	
	<taskdef name="findbugs" 
		classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
		classpath="/opt/findbugs/lib/findbugs-ant.jar"/>

	<taskdef resource="checkstyletask.properties"
		classpath="/opt/checkstyle/checkstyle-all-4.4.jar"/>

	<path id="junit.classpath">
		<pathelement location="${junit.dir}/junit.jar" />
	</path>
	
	<path id="cobertura.classpath">
		<fileset dir="${cobertura.dir}">
			<include name="cobertura.jar" />
			<include name="lib/**/*.jar" />
		</fileset>
	</path>

	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

	<path id="instrumented.classpath">
		<pathelement location="${cobertura-dir}" />
	</path>
	
	<!--- JDom. see also auxclasspath of the findbugs task (dont know how to include that one there ) -->
	<path id="jdom.classpath">
		<!-- I'm not that sure, but I think the ordering is important -->
		<pathelement location="${jdom.dir}/xerces.jar" />
		<pathelement location="${jdom.dir}/xalan.jar" />
		<pathelement location="${jdom.dir}/xml-apis.jar" />
		<pathelement location="${jdom.dir}/jdom.jar" />
	</path>

	<path id="project.classpath">
		<pathelement location="${build.src}" />
		<pathelement location="${build.paser.jar}" />
	</path>
	
	<path id="tests.classpath">
		<pathelement location="${build.tests}" />
	</path>

	<target name="build" depends="build-parser,init">
		<javac srcdir="${src-dir}" destdir="${build.src}" debug="true" deprecation="true">
			<classpath refid="project.classpath" />
			<classpath refid="jdom.classpath" />
			<compilerarg value="-Xlint:unchecked" />
		</javac>
	</target>
	
	<target name="build-parser" depends="init">
		<javac srcdir="${parser-dir}" destdir="${build.parser}" nowarn="false"/>
		<jar destfile="${build.paser.jar}" basedir="${build.parser}" />
	</target>

	<target name="build-test" depends="build">
		<javac srcdir="${tests-dir}" destdir="${build.tests}">
			<classpath refid="project.classpath" />
			<classpath refid="jdom.classpath" />
			<classpath refid="junit.classpath" />
			<compilerarg value="-Xlint:unchecked" />
		</javac>
	</target>
	
	<target name="documentation" depends="init">
		<exec executable="build/build-documents.sh" 
			output="${output.doc-dir}/log.txt" />

		<copy todir="${output.doc-dir}/">
			<fileset dir="${doc-dir}" includes="**/**.pdf" />
		</copy>
		<copy todir="${output.img-dir}/">
			<fileset dir="${doc-dir}/img/" includes="*" />
		</copy>
	</target>

	<target name="init">
		<delete dir="${tmp-dir}" failonerror="false"/>
		<mkdir  dir="${tmp-dir}" />
		
		<mkdir dir="${output.base}" />
		<mkdir dir="${output.logs-dir}" />
		<mkdir dir="${output.base}" />
		<mkdir dir="${output.junit-dir}" />
		<mkdir dir="${output.cobertura-dir}" />
		<mkdir dir="${output.doc-dir}" />
		<mkdir dir="${output.findbugs-dir}" />
		<mkdir dir="${output.checkstyle-dir}" />
		<mkdir dir="${output.tests}" />

		<mkdir dir="${build.base}" />
		<mkdir dir="${build.src}" />
		<mkdir dir="${build.parser}" />
		<mkdir dir="${build.tests}" />
	
	</target>
	
	<target name="init-tests">
		<mkdir dir="${output.junit-dir}" />
		<delete>
			<fileset dir="${output.junit-dir}">
				<include name="*.txt"/>
				<include name="*.xml"/>
			</fileset>
		</delete>
	</target>

	<target name="cobertura-instrument" depends="build">
		<cobertura-instrument todir="${cobertura-dir}" datafile="${cobertura-ser}">
			<includeClasses regex=".*" />
			<excludeClasses regex="something" />
			<instrumentationClasspath>
				<fileset dir="${build.src}">
					<include name="**/*.class" />
					<exclude name="-not-used-atm-" />
				</fileset>
			</instrumentationClasspath>
		</cobertura-instrument>
	</target>

	<target name="run-tests" depends="init-tests,build-test,cobertura-instrument">
		<junit fork="true" haltonfailure="true" printsummary="true">	

			<classpath refid="junit.classpath" />
			
			<classpath refid="cobertura.classpath" />
			<classpath refid="instrumented.classpath" /> 

			<classpath refid="jdom.classpath" />
			<classpath refid="tests.classpath" />
			<classpath refid="project.classpath" />
			
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura-ser}" />

			<formatter type="xml" />
			<formatter type="plain" usefile="true" />
			<test name="ch.hsr.ifs.pystructure.tests.AllTests" todir="${output.junit-dir}" />
		</junit>

		<cobertura-report format="html" destdir="${output.cobertura-dir}" datafile="${cobertura-ser}">
		    <fileset dir="${src-dir}">
			<include name="**/*.java" />
		    </fileset>
		</cobertura-report>
	</target>    

	<target name="checkstyle">
		<checkstyle config="${doc-dir}/sun_checks.xml"
			failureProperty="checkstyle.failure"
			failOnViolation="false">
			<formatter type="xml"   tofile="${output.checkstyle-dir}/checkstyle_report.xml"/>
			<formatter type="plain" tofile="${output.doc-dir}/checkstyle_report.txt"/>
			<fileset dir="src/" >
				<include name="**/*.java" />
				<exclude name="Exclude Stuff if you like" />
			</fileset>
		</checkstyle>
	</target>

	<target name="findbugs" depends="build">

		<findbugs 
			home="${findbugs.dir}"
			output="html"
			effort="max"
			reportLevel="low"
			jvmargs="-Xms256m -Xmx256m -XX:MaxPermSize=256m"
			outputFile="${output.findbugs-dir}/findbugs-${label}.html" >
				<auxClasspath>
					<pathelement location="${build.paser.jar}" />
					
					<!--- JDom. see also jdom classpath definition (dont know how to include that one here ) -->
					<pathelement location="${jdom.dir}/xerces.jar" />
					<pathelement location="${jdom.dir}/xalan.jar" />
					<pathelement location="${jdom.dir}/xml-apis.jar" />
					<pathelement location="${jdom.dir}/jdom.jar" />
				</auxClasspath>
				<sourcePath path="${src-dir}" />
				<class location="${build.src}" />
		</findbugs>
	</target>

	<target name="all" depends="init,build,documentation,checkstyle,run-tests,findbugs"/>
</project>

