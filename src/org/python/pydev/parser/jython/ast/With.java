// Autogenerated AST node
package org.python.pydev.parser.jython.ast;
import org.python.pydev.parser.jython.SimpleNode;
import java.io.DataOutputStream;
import java.io.IOException;

public class With extends stmtType {
    public exprType context_expr;
    public exprType optional_vars;
    public suiteType body;

    public With(exprType context_expr, exprType optional_vars, suiteType
    body) {
        this.context_expr = context_expr;
        this.optional_vars = optional_vars;
        this.body = body;
    }

    public With(exprType context_expr, exprType optional_vars, suiteType
    body, SimpleNode parent) {
        this(context_expr, optional_vars, body);
        this.beginLine = parent.beginLine;
        this.beginColumn = parent.beginColumn;
    }

    public String toString() {
        StringBuffer sb = new StringBuffer("With[");
        sb.append("context_expr=");
        sb.append(dumpThis(this.context_expr));
        sb.append(", ");
        sb.append("optional_vars=");
        sb.append(dumpThis(this.optional_vars));
        sb.append(", ");
        sb.append("body=");
        sb.append(dumpThis(this.body));
        sb.append("]");
        return sb.toString();
    }

    public void pickle(DataOutputStream ostream) throws IOException {
        pickleThis(17, ostream);
        pickleThis(this.context_expr, ostream);
        pickleThis(this.optional_vars, ostream);
        pickleThis(this.body, ostream);
    }

    public Object accept(VisitorIF visitor) throws Exception {
        return visitor.visitWith(this);
    }

    public void traverse(VisitorIF visitor) throws Exception {
        if (context_expr != null)
            context_expr.accept(visitor);
        if (optional_vars != null)
            optional_vars.accept(visitor);
        if (body != null)
            body.accept(visitor);
    }

}
